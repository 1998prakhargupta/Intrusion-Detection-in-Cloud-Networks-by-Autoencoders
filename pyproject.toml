# ===============================================
# NIDS Autoencoder Project - Enhanced pyproject.toml
# ===============================================

[build-system]
requires = [
    "setuptools>=68.0.0",
    "wheel>=0.41.0",
    "setuptools_scm[toml]>=7.1.0",
]
build-backend = "setuptools.build_meta"

[project]
name = "nids-autoencoder"
version = "1.0.0"
description = "Production-ready Network Intrusion Detection System using Autoencoders for anomaly detection"
readme = {file = "README.md", content-type = "text/markdown"}
license = {file = "LICENSE"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = [
    "cybersecurity", 
    "autoencoder", 
    "anomaly-detection", 
    "network-security", 
    "machine-learning",
    "deep-learning",
    "mlops",
    "production-ready"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Security",
    "Topic :: System :: Networking :: Monitoring",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: FastAPI",
    "Framework :: Jupyter",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Natural Language :: English",
]
requires-python = ">=3.8,<3.12"
dependencies = [
    # Core ML/Data Science
    "numpy>=1.21.0,<1.25.0",
    "pandas>=1.5.0,<2.1.0",
    "scikit-learn>=1.2.0,<1.4.0",
    "scipy>=1.9.0,<1.12.0",
    
    # Deep Learning
    "torch>=1.13.0,<2.1.0",
    
    # Visualization
    "matplotlib>=3.6.0,<3.8.0",
    "seaborn>=0.12.0,<0.13.0",
    
    # Web Framework
    "fastapi>=0.95.0,<0.105.0",
    "uvicorn[standard]>=0.20.0,<0.24.0",
    "pydantic>=1.10.0,<2.5.0",
    
    # Configuration & CLI
    "click>=8.1.0,<8.2.0",
    "rich>=13.3.0,<13.7.0",
    "pyyaml>=6.0,<6.1",
    "python-dotenv>=0.21.0,<1.1.0",
    
    # Monitoring
    "prometheus-client>=0.16.0,<0.18.0",
    "structlog>=22.3.0,<23.2.0",
    
    # HTTP
    "requests>=2.28.0,<2.32.0",
    "httpx>=0.24.0,<0.26.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.2.0,<7.5.0",
    "pytest-cov>=4.0.0,<4.2.0",
    "pytest-asyncio>=0.21.0,<0.22.0",
    "pytest-mock>=3.10.0,<3.12.0",
    "pytest-xdist>=3.2.0,<3.4.0",
    
    # Code Quality
    "black>=23.1.0,<23.10.0",
    "isort>=5.12.0,<5.13.0",
    "flake8>=6.0.0,<6.2.0",
    "mypy>=1.0.0,<1.6.0",
    "pylint>=2.16.0,<2.18.0",
    "bandit>=1.7.0,<1.8.0",
    
    # Development Tools
    "pre-commit>=3.1.0,<3.5.0",
    "ipdb>=0.13.13,<0.14.0",
]

docs = [
    "sphinx>=6.1.0,<7.2.0",
    "sphinx-rtd-theme>=1.2.0,<1.4.0",
    "mkdocs>=1.4.0,<1.6.0",
    "mkdocs-material>=9.0.0,<9.5.0",
    "myst-parser>=0.19.0,<2.1.0",
]

notebook = [
    "jupyter>=1.0.0,<1.1.0",
    "jupyterlab>=3.5.0,<4.1.0",
    "ipywidgets>=8.0.0,<8.1.0",
    "nbstripout>=0.6.0,<0.7.0",
]

cloud = [
    "boto3>=1.26.0,<1.29.0",
    "google-cloud-storage>=2.7.0,<2.11.0",
    "azure-storage-blob>=12.14.0,<12.18.0",
]

monitoring = [
    "prometheus-client>=0.16.0,<0.18.0",
    "grafana-api>=1.0.3,<1.1.0",
    "sentry-sdk>=1.15.0,<1.35.0",
]

all = [
    "nids-autoencoder[dev,docs,notebook,cloud,monitoring]",
]

[project.urls]
Homepage = "https://github.com/yourusername/nids-autoencoder"
Documentation = "https://nids-autoencoder.readthedocs.io/"
Repository = "https://github.com/yourusername/nids-autoencoder.git"
Issues = "https://github.com/yourusername/nids-autoencoder/issues"
Changelog = "https://github.com/yourusername/nids-autoencoder/blob/main/CHANGELOG.md"
Security = "https://github.com/yourusername/nids-autoencoder/blob/main/SECURITY.md"
Contributing = "https://github.com/yourusername/nids-autoencoder/blob/main/CONTRIBUTING.md"

[project.scripts]
nids-train = "src.cli.train:main"
nids-predict = "src.cli.predict:main"
nids-serve = "src.cli.serve:main"
nids-evaluate = "src.cli.evaluate:main"
nids-monitor = "src.cli.monitor:main"

# ============ Tool Configurations ============

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*", "docs*", "scripts*"]

[tool.setuptools.package-data]
"*" = [
    "*.yaml",
    "*.yml", 
    "*.json",
    "*.txt",
    "*.html",
    "*.css",
    "*.js",
    "config/*",
    "templates/*",
    "static/*"
]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
^/(
    (
          \.eggs
        | \.git
        | \.hg
        | \.mypy_cache
        | \.nox
        | \.tox
        | \.venv
        | \.svn
        | _build
        | buck-out
        | build
        | dist
        | __pycache__
        | \.pytest_cache
    )/
    | migrations/versions/.*\.py$
    | .+_pb2\.py$
)
'''
force-exclude = '''
^/(
    \.venv/
    | build/
    | dist/
)
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
split_on_trailing_comma = true
known_first_party = ["src", "tests"]
known_third_party = [
    "numpy",
    "pandas", 
    "sklearn",
    "torch",
    "fastapi",
    "pydantic",
    "pytest"
]
sections = [
    "FUTURE",
    "STDLIB", 
    "THIRDPARTY",
    "FIRSTPARTY",
    "LOCALFOLDER"
]
default_section = "THIRDPARTY"
force_single_line = false
force_sort_within_sections = true
lexicographical = true
single_line_exclusions = ["typing"]

[tool.mypy]
python_version = "3.8"
platform = "linux"
show_error_codes = true
show_column_numbers = true
show_error_context = true
ignore_missing_imports = true
follow_imports = "skip"
follow_imports_for_stubs = true
disallow_any_generics = true
disallow_any_unimported = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

# Module-specific overrides
[[tool.mypy.overrides]]
module = [
    "tests.*",
    "scripts.*",
    "docs.*"
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "sklearn.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config", 
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
    "--durations=10",
    "--tb=short",
    "-q"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "fast: marks tests as fast",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests", 
    "e2e: marks tests as end-to-end tests",
    "api: marks tests for API components",
    "model: marks tests for ML model components",
    "data: marks tests for data processing",
    "utils: marks tests for utility functions",
    "gpu: marks tests that require GPU",
    "network: marks tests that require network access",
    "database: marks tests that require database",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::FutureWarning:pandas.*",
    "ignore::UserWarning:torch.*",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
asyncio_mode = "auto"

]

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "setup.py",
]
dynamic_context = "test_function"

[tool.coverage.report]
show_missing = true
skip_covered = false
skip_empty = true
sort = "cover"
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*Protocol:",
    "@(abc)?abstractmethod",
]
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"
title = "NIDS Autoencoder Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

[tool.flake8]
max-line-length = 88
max-complexity = 10
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "C90", # mccabe complexity
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstyle
    "B",   # flake8-bugbear
    "S",   # flake8-bandit
]
ignore = [
    "E203", # whitespace before ':'
    "E501", # line too long (black handles this)
    "W503", # line break before binary operator
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in __init__
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info",
    "migrations",
    "docs",
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "tests/*:D,S101",    # no docstrings in tests, allow assert
    "scripts/*:D",       # no docstrings in scripts
]
docstring-convention = "google"

[tool.pylint.main]
load-plugins = [
    "pylint.extensions.check_elif",
    "pylint.extensions.bad_builtin",
    "pylint.extensions.docparams",
    "pylint.extensions.for_any_all",
    "pylint.extensions.set_membership",
    "pylint.extensions.code_style",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.typing",
]
py-version = "3.8"
ignore-paths = [
    "^.*/tests/.*$",
    "^.*/docs/.*$", 
    "^.*/migrations/.*$",
    "^.*/build/.*$",
    "^.*/dist/.*$",
]

[tool.pylint.messages_control]
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]
disable = [
    "missing-module-docstring",
    "missing-class-docstring", 
    "missing-function-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "duplicate-code",
    "fixme",
    "todo",
]
enable = [
    "use-symbolic-message-instead",
    "useless-suppression",
]

[tool.pylint.reports]
output-format = "colorized"
reports = false
score = true

[tool.pylint.refactoring]
max-nested-blocks = 5
never-returning-functions = ["sys.exit", "argparse.parse_error"]

[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-imports = true
ignore-signatures = true
min-similarity-lines = 4

[tool.pylint.spelling]
max-spelling-suggestions = 4
spelling-ignore-comment-directives = "fmt: off,fmt: on,noqa:,noqa,nosec,isort:skip,mypy:"

[tool.pylint.variables]
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"

[tool.bandit]
exclude_dirs = ["tests", "docs", "scripts"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection (in tests)

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/*_test.py"]

# ============ Additional Tools ============

[tool.pydocstyle]
convention = "google"
add-ignore = ["D100", "D104", "D107", "D203", "D213"]
match-dir = "^(?!(tests|docs|migrations|scripts)).*"

[tool.vulture]
exclude = ["tests/", "docs/", "scripts/", "migrations/"]
ignore_decorators = ["@app.route", "@pytest.fixture", "@click.command"]
ignore_names = ["_", "dummy", "unused"]
make_whitelist = true
min_confidence = 60
paths = ["src"]
sort_by_size = true

[tool.radon]
exclude = "**/tests/**,**/docs/**,**/migrations/**"
show_complexity = true
average = true
total_average = true

# ============ End of pyproject.toml ============
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

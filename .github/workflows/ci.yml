name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.9"
  NODE_VERSION: "18"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Lint with flake8
      run: |
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Format check with black
      run: black --check src tests

    - name: Import sorting check with isort
      run: isort --check-only src tests

    - name: Type checking with mypy
      run: mypy src

    - name: Security check with bandit
      run: bandit -r src

    - name: Test with pytest
      run: |
        # Run unit tests with coverage
        pytest tests/unit/ -v --cov=src --cov-report=xml:coverage-unit.xml --cov-report=html:htmlcov-unit -m "unit" --junitxml=junit-unit.xml
        
        # Run integration tests
        pytest tests/integration/ -v --cov=src --cov-append --cov-report=xml:coverage-integration.xml --cov-report=html:htmlcov-integration -m "integration" --junitxml=junit-integration.xml
        
        # Run all tests for comprehensive coverage
        pytest tests/ -v --cov=src --cov-report=xml:coverage-all.xml --cov-report=html:htmlcov-all --junitxml=junit-all.xml --maxfail=5

    - name: Run performance tests
      if: matrix.python-version == '3.9'  # Only run on one Python version
      run: |
        pytest tests/ -v -m "slow" --junitxml=junit-performance.xml || true  # Don't fail CI on performance issues

    - name: Generate test report
      if: always()
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "### Unit Tests" >> $GITHUB_STEP_SUMMARY
        python -c "
        import xml.etree.ElementTree as ET
        try:
            tree = ET.parse('junit-unit.xml')
            root = tree.getroot()
            tests = root.get('tests', '0')
            failures = root.get('failures', '0')
            errors = root.get('errors', '0')
            print(f'- Tests: {tests}, Failures: {failures}, Errors: {errors}')
        except: print('- Unit test results not available')
        " >> $GITHUB_STEP_SUMMARY
        
        echo "### Integration Tests" >> $GITHUB_STEP_SUMMARY
        python -c "
        import xml.etree.ElementTree as ET
        try:
            tree = ET.parse('junit-integration.xml')
            root = tree.getroot()
            tests = root.get('tests', '0')
            failures = root.get('failures', '0')
            errors = root.get('errors', '0')
            print(f'- Tests: {tests}, Failures: {failures}, Errors: {errors}')
        except: print('- Integration test results not available')
        " >> $GITHUB_STEP_SUMMARY

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME || '1998prakhargupta' }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME || '1998prakhargupta' }}/nids-autoencoder
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Setup Python for security scan
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install safety
      run: pip install safety

    - name: Check dependencies for vulnerabilities
      run: safety check --json --output safety-report.json || true

    - name: Upload safety report
      uses: actions/upload-artifact@v3
      with:
        name: safety-report
        path: safety-report.json

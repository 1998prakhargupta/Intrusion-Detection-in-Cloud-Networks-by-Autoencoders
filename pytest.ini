# ===============================================
# NIDS Autoencoder Project - Pytest Configuration
# ===============================================

[tool:pytest]
# ============ Test Discovery ============
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# ============ Minimum Version ============
minversion = 7.0

# ============ Required Plugins ============
required_plugins = 
    pytest-cov>=4.0.0
    pytest-mock>=3.10.0
    pytest-asyncio>=0.21.0
    pytest-xdist>=3.2.0

# ============ Command Line Options ============
addopts = 
    # Verbose output
    -v
    # Show local variables in tracebacks
    --tb=short
    # Show summary info for all test outcomes
    -ra
    # Strict mode for warnings
    --strict-markers
    --strict-config
    # Disable warnings summary
    --disable-warnings
    # Show durations of slowest tests
    --durations=10
    # Coverage options
    --cov=src
    --cov-branch
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    # Parallel execution
    -n auto
    # Show local variables on failures
    --showlocals

# ============ Test Markers ============
markers =
    # Performance markers
    slow: marks tests as slow (deselect with '-m "not slow"')
    fast: marks tests as fast
    unit: marks tests as unit tests
    integration: marks tests as integration tests
    e2e: marks tests as end-to-end tests
    
    # Component markers
    api: marks tests for API components
    model: marks tests for ML model components
    data: marks tests for data processing components
    utils: marks tests for utility functions
    config: marks tests for configuration management
    
    # Environment markers
    local: marks tests that run only in local environment
    docker: marks tests that require Docker
    gpu: marks tests that require GPU
    network: marks tests that require network access
    
    # Data markers
    requires_data: marks tests that require test data
    large_data: marks tests that use large datasets
    
    # Security markers
    security: marks tests for security components
    auth: marks tests for authentication
    
    # Performance markers
    benchmark: marks tests for performance benchmarking
    memory: marks tests for memory usage
    
    # External dependencies
    database: marks tests that require database
    redis: marks tests that require Redis
    elasticsearch: marks tests that require Elasticsearch
    
    # Platform specific
    linux: marks tests that run only on Linux
    windows: marks tests that run only on Windows
    macos: marks tests that run only on macOS

# ============ Asyncio Configuration ============
asyncio_mode = auto

# ============ Log Configuration ============
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Log file configuration
log_file = tests/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# ============ Warning Filters ============
filterwarnings =
    # Ignore specific warnings
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::ResourceWarning
    
    # Convert specific warnings to errors
    error::RuntimeWarning
    
    # Ignore warnings from specific modules
    ignore::DeprecationWarning:sklearn.*
    ignore::FutureWarning:pandas.*
    ignore::UserWarning:torch.*
    ignore::DeprecationWarning:tensorflow.*
    
    # Ignore network-related warnings in tests
    ignore:.*urllib3.*:urllib3.exceptions.InsecureRequestWarning
    
    # Ignore matplotlib warnings
    ignore:.*matplotlib.*:UserWarning

# ============ Test Collection ============
collect_ignore = [
    "setup.py",
    "conftest.py",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info",
    node_modules
    .git
    __pycache__
    .pytest_cache
    .tox
    .mypy_cache
    docs/_build

# ============ xdist Configuration ============
# Distribute tests across CPU cores
dist = loadscope
# Ensure tests run in isolation
rsyncdirs = src tests

# ============ Coverage Configuration ============
# Additional coverage options are in pyproject.toml or .coveragerc

# ============ Timeout Configuration ============
# Global timeout for all tests (in seconds)
timeout = 300

# Timeout for slow tests
timeout_method = thread

# ============ Mock Configuration ============
# Automatically detect and patch datetime
mock_use_standalone_module = true

# ============ Temporary Directory ============
# Base temporary directory for test files
tmp_path_retention_count = 3
tmp_path_retention_policy = failed

# ============ JUnit XML Configuration ============
junit_family = xunit2
junit_suite_name = nids_autoencoder_tests
junit_logging = system-out
junit_log_passing_tests = true

# ============ HTML Report Configuration ============
# Generate HTML report with test results
html_report = tests/reports/report.html
html_self_contained = true

# ============ Test Data Configuration ============
# Custom test data directory
test_data_dir = tests/data
test_config_dir = tests/config

# ============ Environment Variables ============
# Set environment variables for tests
env = 
    ENVIRONMENT = test
    LOG_LEVEL = DEBUG
    TESTING = true
    DATABASE_URL = sqlite:///test.db
    REDIS_URL = redis://localhost:6379/1
    API_BASE_URL = http://localhost:8000
    
# ============ Custom Fixtures ============
# Pytest will look for fixtures in these locations
confcutdir = tests

# ============ Doctest Configuration ============
doctest_optionflags = 
    NORMALIZE_WHITESPACE 
    IGNORE_EXCEPTION_DETAIL
    ALLOW_UNICODE
    ALLOW_BYTES

# ============ Performance Configuration ============
# Benchmark configuration
benchmark_only = false
benchmark_sort = mean
benchmark_compare_fail = mean:5%
benchmark_warmup = true
benchmark_warmup_iterations = 2
benchmark_disable_gc = true

# ============ Plugin Configuration ============
# Configure specific plugins
asyncio_mode = auto

# ============ End of pytest.ini ============
